{"version":3,"sources":["NumberFormatCustom.js","index.js"],"names":["NumberFormatCustom","React","props","ref","onChange","other","Object","objectWithoutProperties","react","react_number_format_es","assign","getInputRef","onValueChange","values","target","name","value","thousandSeparator","prefix","displayType","decimalScale","App","_useState","useState","_useState2","slicedToArray","amount","setAmount","_useState3","_useState4","splitPrices","setSplitPrices","_useState5","_useState6","targetSplits","setTargetSplits","_useState7","_useState8","splitErs","setSplitErs","_useState9","_useState10","currentSplits","setCurrentSplits","_useState11","_useState12","totalPercent","setTotalPercent","_useState13","_useState14","currentTotal","setCurrentTotal","useEffect","reduce","acc","c","Number","totalEr","useMemo","curr","i","splitInAmt","onSplitCostChanges","useCallback","id","e","newSplitPrices","toConsumableArray","onSplitErChanges","newSplitErs","onSplitPercentChanges","newtargetSplits","onTargetSplitValueChanges","onCurrentSplitValueChanges","handleAddtargetSplits","olstargetSplits","concat","handleRemovetargetSplits","idx","splice","handleAmountChange","react_default","a","createElement","className","Box","sx","& > :not(style)","m","TextField","label","InputProps","inputComponent","variant","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","size","disabled","endAdornment","InputAdornment","position","error","toFixed","map","split","targetAmountFromTotalCurrent","splitCost","splitEr","key","startAdornment","IconButton","color","onClick","Icon","fontSize","red","aria-label","green","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8TA6BeA,EA1BYC,aAAiB,SAC1CC,EACAC,GACA,IACQC,EAAuBF,EAAvBE,SAAaC,EADrBC,OAAAC,EAAA,EAAAD,CAC+BJ,EAD/B,cAGA,OACEM,EAAA,cAACC,EAAA,EAADH,OAAAI,OAAA,GACML,EADN,CAEEM,YAAaR,EACbS,cAAe,SAACC,GACdT,EAAS,CACPU,OAAQ,CACNC,KAAMb,EAAMa,KACZC,MAAOH,EAAOG,UAIpBC,mBAAiB,EACjBC,OAAO,OACPC,YAAa,SACbC,aAAc,OCVpB,SAASC,IAAM,IAAAC,EACeC,mBAAS,KADxBC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAgB,EAAA,GACNI,EADMF,EAAA,GACEG,EADFH,EAAA,GAAAI,EAEyBL,mBAAS,CAAC,GAAI,GAAI,KAF3CM,EAAAvB,OAAAmB,EAAA,EAAAnB,CAAAsB,EAAA,GAENE,EAFMD,EAAA,GAEOE,EAFPF,EAAA,GAAAG,EAG2BT,mBAAS,CAAC,GAAI,GAAI,KAH7CU,EAAA3B,OAAAmB,EAAA,EAAAnB,CAAA0B,EAAA,GAGNE,EAHMD,EAAA,GAGQE,EAHRF,EAAA,GAAAG,EAImBb,mBAAS,CAAC,IAAM,IAAM,MAJzCc,EAAA/B,OAAAmB,EAAA,EAAAnB,CAAA8B,EAAA,GAINE,EAJMD,EAAA,GAIIE,EAJJF,EAAA,GAAAG,EAK6BjB,mBAAS,CAAC,KAAM,KAAM,MALnDkB,EAAAnC,OAAAmB,EAAA,EAAAnB,CAAAkC,EAAA,GAKNE,EALMD,EAAA,GAKSE,EALTF,EAAA,GAAAG,EAM2BrB,mBAAS,GANpCsB,EAAAvC,OAAAmB,EAAA,EAAAnB,CAAAsC,EAAA,GAMNE,EANMD,EAAA,GAMQE,EANRF,EAAA,GAAAG,EAO2BzB,mBAAS,GAPpC0B,EAAA3C,OAAAmB,EAAA,EAAAnB,CAAA0C,EAAA,GAONE,EAPMD,EAAA,GAOQE,EAPRF,EAAA,GAQbG,oBACE,kBAAML,EAAgBb,EAAamB,OAAO,SAACC,EAAKC,GAAN,OAAYD,EAAME,OAAOD,IAAI,KACvE,CAACrB,IAEHkB,oBACE,kBAAMD,EAAgBT,EAAcW,OAAO,SAACC,EAAKC,GAAN,OAAYD,EAAME,OAAOD,IAAI,KACxE,CAACb,IAEH,IAAMe,EAAUC,kBAAQ,WAMtB,OALgBxB,EAAamB,OAAO,SAACC,EAAKK,EAAMC,GAC9C,IAAMC,EAAaL,OAAQ9B,EAASiC,EAAQ,KAE5C,OADAL,GAAOhB,EAASsB,GAAKC,GAEpB,GACcnC,GAChB,CAACY,EAAUZ,EAAQQ,IAEhB4B,EAAqBC,sBACzB,SAACC,GAAD,OAAQ,SAACC,GAAM,IACLjD,EAAUiD,EAAEnD,OAAZE,MACFkD,EAAc5D,OAAA6D,EAAA,EAAA7D,CAAOwB,GAC3BoC,EAAeF,GAAMhD,EACrBe,EAAemC,KAEjB,CAACpC,IAEGsC,EAAmBL,sBACvB,SAACC,GAAD,OAAQ,SAACC,GAAM,IACLjD,EAAUiD,EAAEnD,OAAZE,MACFqD,EAAW/D,OAAA6D,EAAA,EAAA7D,CAAOgC,GACxB+B,EAAYL,GAAMhD,EAClBuB,EAAY8B,KAEd,CAAC/B,IAEGgC,EAAwBP,sBAC5B,SAACC,GAAD,OAAQ,SAACC,GACP,IAAMM,EAAejE,OAAA6D,EAAA,EAAA7D,CAAO4B,GAC5BqC,EAAgBP,GAAMR,OAAOS,EAAEnD,OAAOE,OACtCmB,EAAgBoC,KAElB,CAACrC,IAEGsC,EAA4BT,sBAChC,SAACC,GAAD,OAAQ,SAACC,GACP,GAAIvC,EAAS,EAAG,KACNV,EAAUiD,EAAEnD,OAAZE,MACFuD,EAAejE,OAAA6D,EAAA,EAAA7D,CAAO4B,GAC5BqC,EAAgBP,GAAMR,OAAgB,IAARxC,EAAeU,GAC7CS,EAAgBoC,MAGpB,CAACrC,EAAcR,IAEX+C,EAA6BV,sBACjC,SAACC,GAAD,OAAQ,SAACC,GAAM,IACLjD,EAAUiD,EAAEnD,OAAZE,MACFuD,EAAejE,OAAA6D,EAAA,EAAA7D,CAAOoC,GAC5B6B,EAAgBP,GAAMhD,EACtB2B,EAAiB4B,KAEnB,CAAC7B,IAEGgC,EAAwBX,sBAAY,WACxC5B,EAAgB,SAACwC,GAAD,SAAAC,OAAAtE,OAAA6D,EAAA,EAAA7D,CAAyBqE,GAAzB,CAA0C,OACzD,IAEGE,EAA2Bd,sBAAY,SAACe,GAC5C3C,EAAgB,SAACwC,GAEf,OADAA,EAAgBI,OAAOD,EAAK,GACrBxE,OAAA6D,EAAA,EAAA7D,CAAIqE,MAEZ,IACGK,EAAqBjB,sBACzB,SAACE,GAAD,OAAOtC,EAAU6B,OAAOS,EAAEnD,OAAOE,SACjC,IAEF,OACEiE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACED,UAAU,gBACVE,GAAI,CACFC,kBAAmB,CACjBC,EAAG,KAIPP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEC,MAAM,SACN1E,MAAOU,EACPtB,SAAU4E,EACVjE,KAAK,eACLiD,GAAG,+BACH2B,WAAY,CACVC,eAAgB5F,GAElB6F,QAAQ,cAGZZ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACED,UAAU,gBACVE,GAAI,CACFC,kBAAmB,CACjBC,EAAG,KAIPP,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,SAApB,SACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACElC,GAAG,QACHmC,KAAK,QACLC,UAAQ,EACRpF,MAAO8B,EACPuD,aAAcpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,OAAzB,KACdb,MAAM,QACNc,MAAwB,MAAjB1D,KAGXmC,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,eAApB,eACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,cACH0B,MAAM,cACNU,UAAQ,EACRpF,MAAQU,EAASoB,EAAgB,IACjC/B,KAAK,eACL6E,eAAgB5F,EAChB6F,QAAQ,cAGZZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,YAApB,eACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,WACH0B,MAAM,cACNU,UAAQ,EACRpF,MAAOwC,OAAOC,GAASgD,QAAQ,GAC/B1F,KAAK,eACLsF,aAAcpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,OAAzB,KACdV,QAAQ,cAGZZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,WAApB,iBACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,UACH0B,MAAM,gBACNU,UAAQ,EACRpF,MAAOkC,EACPnC,KAAK,eACL6E,eAAgB5F,EAChB6F,QAAQ,eAIb3D,EAAawE,IAAI,SAACC,EAAO/C,GACxB,IAAMC,EAAaL,OAAQ9B,EAASiF,EAAS,KACvCC,EAAgC1D,EAAeyD,EAAS,IACxDE,EAAY/E,EAAY8B,GACxBkD,EAAUxE,EAASsB,GACzB,OACEqB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE0B,IAAKnD,EACLwB,UAAU,gBACVE,GAAI,CACFC,kBAAmB,CACjBC,EAAG,KAIPP,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,UAApB,SAAArB,OAAuChB,EAAI,IAC3CqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,SACHhD,MAAO2F,EAAMF,QAAQ,GACrBrG,SAAUkE,EAAsBV,GAChCyC,aAAcpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,OAAzB,KACdb,MAAK,SAAAd,OAAWhB,EAAI,GACpB4C,MAAwB,MAAjB1D,KAGXmC,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,QAApB,SAAArB,OAAqChB,EAAI,IACzCqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,OACHhD,MAAO6F,EACPzG,SAAU0D,EAAmBF,GAC7BoD,eACE/B,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,SAAzB,QAEFb,MAAK,SAAAd,OAAWhB,EAAI,MAGxBqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAQ,MAApB,MAAArB,OAAgChB,EAAI,IACpCqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAG,KACHhD,MAAO8F,EACP1G,SAAUgE,EAAiBR,GAC3ByC,aAAcpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,OAAzB,KACdb,MAAK,MAAAd,OAAQhB,EAAI,MAGrBqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAO,SAAArB,OAAWhB,IAA9B,QACAqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAE,SAAAY,OAAWhB,GACb8B,MAAM,OACN1E,MAAO6C,EACP9C,KAAK,eACL6E,eAAgB5F,EAChB6F,QAAQ,WACRzF,SAAUoE,EAA0BZ,MAIxCqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAO,MAAArB,OAAQhB,IAA3B,QACAqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLC,UAAQ,EACRpC,GAAE,MAAAY,OAAQhB,GACV8B,MAAM,MACN1E,MAAOwC,OAAOK,EAAagD,GAAWJ,QAAQ,MAIlDxB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAO,eAAArB,OAAiBhB,IAApC,eACAqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLnC,GAAE,eAAAY,OAAiBhB,GACnB8B,MAAM,cACN1E,MAAOwC,OAAOd,EAAckB,IAC5B7C,KAAK,eACL6E,eAAgB5F,EAChB6F,QAAQ,WACRzF,SAAUqE,EAA2Bb,MAGzCqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAO,iBAAArB,OAAmBhB,IAAtC,YACAqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLC,UAAQ,EACRpC,GAAE,iBAAAY,OAAmBhB,GACrB8B,MAAM,WACN1E,MAAOwC,OACLd,EAAckB,GACVJ,OAA2B,IAAnBd,EAAckB,GAAYV,GAClC,GACJuD,QAAQ,GACVJ,aAAcpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,OAAzB,QAIlBtB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAaC,WAAS,EAACT,GAAI,CAAEE,EAAG,IAC9BP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAYC,QAAO,kBAAArB,OAAoBhB,IAAvC,aACAqB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACEC,KAAK,QACLC,UAAQ,EACRpC,GAAE,kBAAAY,OAAoBhB,GACtB8B,MAAM,YACN1E,MAAOwC,OACLoD,GACGlE,EAAckB,GAAKJ,OAAOd,EAAckB,IAAM,IACjD6C,QAAQ,GACVO,eACE/B,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAgBC,SAAS,SAAzB,WAKNtB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEC,MAAM,YACNC,QAAS,kBAAMtC,EAAyBjB,KAExCqB,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMC,SAAS,QAAQ/B,GAAI,CAAE4B,MAAOI,IAAI,OAAxC,qBAQRrC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CACEC,MAAM,UACNK,aAAW,uBACXJ,QAASzC,GAETO,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAM9B,GAAI,CAAE4B,MAAOM,IAAM,OAAzB,gBAMR,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC9D,EAAD,MAASoG","file":"static/js/main.71fd21c4.chunk.js","sourcesContent":["import * as React from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      prefix=\"Â£\"\n      displayType={\"number\"}\n      decimalScale={2}\n    />\n  );\n});\n\nexport default NumberFormatCustom;\n","import React, { useCallback, useEffect, useState, useMemo } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField from \"@mui/material/TextField\";\nimport { green, red } from \"@mui/material/colors\";\nimport Icon from \"@mui/material/Icon\";\nimport \"./styles.css\";\nimport { Box } from \"@mui/material\";\nimport NumberFormatCustom from \"./NumberFormatCustom\";\n\nfunction App() {\n  const [amount, setAmount] = useState(10000);\n  const [splitPrices, setSplitPrices] = useState([10, 20, 30]);\n  const [targetSplits, setTargetSplits] = useState([20, 30, 50]);\n  const [splitErs, setSplitErs] = useState([0.75, 0.75, 0.07]);\n  const [currentSplits, setCurrentSplits] = useState([2500, 2500, 10000]);\n  const [totalPercent, setTotalPercent] = useState(0);\n  const [currentTotal, setCurrentTotal] = useState(0);\n  useEffect(\n    () => setTotalPercent(targetSplits.reduce((acc, c) => acc + Number(c), 0)),\n    [targetSplits]\n  );\n  useEffect(\n    () => setCurrentTotal(currentSplits.reduce((acc, c) => acc + Number(c), 0)),\n    [currentSplits]\n  );\n  const totalEr = useMemo(() => {\n    const erTotal = targetSplits.reduce((acc, curr, i) => {\n      const splitInAmt = Number((amount * curr) / 100);\n      acc += splitErs[i] * splitInAmt;\n      return acc;\n    }, 0);\n    return erTotal / amount;\n  }, [splitErs, amount, targetSplits]);\n\n  const onSplitCostChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newSplitPrices = [...splitPrices];\n      newSplitPrices[id] = value;\n      setSplitPrices(newSplitPrices);\n    },\n    [splitPrices]\n  );\n  const onSplitErChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newSplitErs = [...splitErs];\n      newSplitErs[id] = value;\n      setSplitErs(newSplitErs);\n    },\n    [splitErs]\n  );\n  const onSplitPercentChanges = useCallback(\n    (id) => (e) => {\n      const newtargetSplits = [...targetSplits];\n      newtargetSplits[id] = Number(e.target.value);\n      setTargetSplits(newtargetSplits);\n    },\n    [targetSplits]\n  );\n  const onTargetSplitValueChanges = useCallback(\n    (id) => (e) => {\n      if (amount > 0) {\n        const { value } = e.target;\n        const newtargetSplits = [...targetSplits];\n        newtargetSplits[id] = Number((value * 100) / amount);\n        setTargetSplits(newtargetSplits);\n      }\n    },\n    [targetSplits, amount]\n  );\n  const onCurrentSplitValueChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newtargetSplits = [...currentSplits];\n      newtargetSplits[id] = value;\n      setCurrentSplits(newtargetSplits);\n    },\n    [currentSplits]\n  );\n  const handleAddtargetSplits = useCallback(() => {\n    setTargetSplits((olstargetSplits) => [...olstargetSplits, 0]);\n  }, []);\n\n  const handleRemovetargetSplits = useCallback((idx) => {\n    setTargetSplits((olstargetSplits) => {\n      olstargetSplits.splice(idx, 1);\n      return [...olstargetSplits];\n    });\n  }, []);\n  const handleAmountChange = useCallback(\n    (e) => setAmount(Number(e.target.value)),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <h1>Portfolio Rebalance Calculator</h1>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <TextField\n          label=\"Amount\"\n          value={amount}\n          onChange={handleAmountChange}\n          name=\"numberformat\"\n          id=\"formatted-numberformat-input\"\n          InputProps={{\n            inputComponent: NumberFormatCustom\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"total\">Total</InputLabel>\n          <OutlinedInput\n            id=\"total\"\n            size=\"small\"\n            disabled\n            value={totalPercent}\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n            label=\"Total\"\n            error={totalPercent !== 100}\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"Total(Â£)\">Total(Â£)</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"Total(Â£)\"\n            label=\"Total(Â£)\"\n            disabled\n            value={(amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"Total-ER\">Total-ER(%)</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"Total-ER\"\n            label=\"Total-ER(%)\"\n            disabled\n            value={Number(totalEr).toFixed(2)}\n            name=\"numberformat\"\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n            variant=\"standard\"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"balance\">Current Total</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"balance\"\n            label=\"Current Total\"\n            disabled\n            value={currentTotal}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n      </Box>\n      {targetSplits.map((split, i) => {\n        const splitInAmt = Number((amount * split) / 100);\n        const targetAmountFromTotalCurrent = (currentTotal * split) / 100;\n        const splitCost = splitPrices[i];\n        const splitEr = splitErs[i];\n        return (\n          <Box\n            key={i}\n            className=\"split-section\"\n            sx={{\n              \"& > :not(style)\": {\n                m: 1\n              }\n            }}\n          >\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"amount\">{`Stock-${i + 1}`}</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"amount\"\n                value={split.toFixed(0)}\n                onChange={onSplitPercentChanges(i)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n                label={`Stock-${i + 1}`}\n                error={totalPercent !== 100}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"cost\">{`Price-${i + 1}`}</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"cost\"\n                value={splitCost}\n                onChange={onSplitCostChanges(i)}\n                startAdornment={\n                  <InputAdornment position=\"start\">Â£</InputAdornment>\n                }\n                label={`Price-${i + 1}`}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"er\">{`ER-${i + 1}`}</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"er\"\n                value={splitEr}\n                onChange={onSplitErChanges(i)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n                label={`ER-${i + 1}`}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`amount${i}`}>Â£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`amount${i}`}\n                label=\"Â£\"\n                value={splitInAmt}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onTargetSplitValueChanges(i)}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`qty${i}`}>Qty#</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`qty${i}`}\n                label=\"Qty\"\n                value={Number(splitInAmt / splitCost).toFixed(0)}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currntAmount${i}`}>CurrentÂ£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`currntAmount${i}`}\n                label=\"CurrentÂ£\"\n                value={Number(currentSplits[i])}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onCurrentSplitValueChanges(i)}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currentPercent${i}`}>Current%</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`currentPercent${i}`}\n                label=\"Current%\"\n                value={Number(\n                  currentSplits[i]\n                    ? Number((currentSplits[i] * 100) / currentTotal)\n                    : 0\n                ).toFixed(0)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`rebalanceAmount${i}`}>Rebalance</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`rebalanceAmount${i}`}\n                label=\"Rebalance\"\n                value={Number(\n                  targetAmountFromTotalCurrent -\n                    (currentSplits[i] ? Number(currentSplits[i]) : 0)\n                ).toFixed(0)}\n                startAdornment={\n                  <InputAdornment position=\"start\">Â£</InputAdornment>\n                }\n              />\n            </FormControl>\n\n            <IconButton\n              color=\"secondary\"\n              onClick={() => handleRemovetargetSplits(i)}\n            >\n              <Icon fontSize=\"small\" sx={{ color: red[500] }}>\n                remove_circle\n              </Icon>\n            </IconButton>\n          </Box>\n        );\n      })}\n\n      <IconButton\n        color=\"primary\"\n        aria-label=\"add to shopping cart\"\n        onClick={handleAddtargetSplits}\n      >\n        <Icon sx={{ color: green[500] }}>add_circle</Icon>\n      </IconButton>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}