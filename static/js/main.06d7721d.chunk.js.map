{"version":3,"sources":["NumberFormatCustom.js","index.js"],"names":["NumberFormatCustom","React","props","ref","onChange","other","Object","objectWithoutProperties","react","react_number_format_es","assign","getInputRef","onValueChange","values","target","name","value","thousandSeparator","prefix","displayType","decimalScale","App","_useState","useState","_useState2","slicedToArray","amount","setAmount","_useState3","_useState4","splitPrices","setSplitPrices","_useState5","_useState6","targetSplits","setTargetSplits","_useState7","_useState8","currentSplits","setCurrentSplits","_useState9","_useState10","totalPercent","setTotalPercent","_useState11","_useState12","currentTotal","setCurrentTotal","_useState13","_useState14","newInvestment","setNewInvestment","useEffect","reduce","acc","c","Number","onSplitCostChanges","useCallback","id","e","newSplitPrices","toConsumableArray","onSplitPercentChanges","newtargetSplits","onTargetSplitValueChanges","onCurrentSplitValueChanges","handleAddtargetSplits","olstargetSplits","concat","handleRemovetargetSplits","idx","splice","handleAmountChange","handleNewInvestmentChange","react_default","a","createElement","className","Box","sx","& > :not(style)","m","TextField","label","InputProps","inputComponent","variant","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","size","disabled","endAdornment","InputAdornment","position","error","map","split","i","splitInAmt","splitCost","targetAmountFromTotalCurrent","newInvestmentSplit","rebalanceAmt","rebalanceQty","side","residueAmt","Math","floor","key","toFixed","startAdornment","abs","IconButton","color","onClick","Icon","fontSize","red","aria-label","green","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.06d7721d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      prefix=\"Â£\"\n      displayType={\"number\"}\n      decimalScale={2}\n    />\n  );\n});\n\nexport default NumberFormatCustom;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField from \"@mui/material/TextField\";\nimport { green, red } from \"@mui/material/colors\";\nimport Icon from \"@mui/material/Icon\";\nimport \"./styles.css\";\nimport { Box } from \"@mui/material\";\nimport NumberFormatCustom from \"./NumberFormatCustom\";\n\nfunction App() {\n  const [amount, setAmount] = useState(10000);\n  const [splitPrices, setSplitPrices] = useState([92.67, 1020.89, 3.56]);\n  const [targetSplits, setTargetSplits] = useState([14, 21, 65]);\n  const [currentSplits, setCurrentSplits] = useState([6764, 14292, 52941]);\n  const [totalPercent, setTotalPercent] = useState(0);\n  const [currentTotal, setCurrentTotal] = useState(0);\n  const [newInvestment, setNewInvestment] = useState(0);\n  useEffect(\n    () => setTotalPercent(targetSplits.reduce((acc, c) => acc + Number(c), 0)),\n    [targetSplits]\n  );\n  useEffect(\n    () => setCurrentTotal(currentSplits.reduce((acc, c) => acc + Number(c), 0)),\n    [currentSplits]\n  );\n\n  const onSplitCostChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newSplitPrices = [...splitPrices];\n      newSplitPrices[id] = value;\n      setSplitPrices(newSplitPrices);\n    },\n    [splitPrices]\n  );\n  const onSplitPercentChanges = useCallback(\n    (id) => (e) => {\n      const newtargetSplits = [...targetSplits];\n      newtargetSplits[id] = Number(e.target.value);\n      setTargetSplits(newtargetSplits);\n    },\n    [targetSplits]\n  );\n  const onTargetSplitValueChanges = useCallback(\n    (id) => (e) => {\n      if (amount > 0) {\n        const { value } = e.target;\n        const newtargetSplits = [...targetSplits];\n        newtargetSplits[id] = Number((value * 100) / amount);\n        setTargetSplits(newtargetSplits);\n      }\n    },\n    [targetSplits, amount]\n  );\n  const onCurrentSplitValueChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newtargetSplits = [...currentSplits];\n      newtargetSplits[id] = value;\n      setCurrentSplits(newtargetSplits);\n    },\n    [currentSplits]\n  );\n  const handleAddtargetSplits = useCallback(() => {\n    setTargetSplits((olstargetSplits) => [...olstargetSplits, 0]);\n  }, []);\n\n  const handleRemovetargetSplits = useCallback((idx) => {\n    setTargetSplits((olstargetSplits) => {\n      olstargetSplits.splice(idx, 1);\n      return [...olstargetSplits];\n    });\n  }, []);\n  const handleAmountChange = useCallback(\n    (e) => setAmount(Number(e.target.value)),\n    []\n  );\n  const handleNewInvestmentChange = useCallback(\n    (e) => setNewInvestment(Number(e.target.value)),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <h1>Portfolio Rebalance Calculator</h1>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <TextField\n          label=\"Starting Amount\"\n          value={amount}\n          onChange={handleAmountChange}\n          name=\"numberformat\"\n          id=\"formatted-numberformat-input\"\n          InputProps={{\n            inputComponent: NumberFormatCustom\n          }}\n          variant=\"standard\"\n        />\n        <TextField\n          label=\"New Investment\"\n          value={newInvestment}\n          onChange={handleNewInvestmentChange}\n          name=\"numberformat\"\n          id=\"newInvetment\"\n          InputProps={{\n            inputComponent: NumberFormatCustom\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"total\">Total</InputLabel>\n          <OutlinedInput\n            id=\"total\"\n            size=\"small\"\n            disabled\n            value={totalPercent}\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n            label=\"Total\"\n            error={totalPercent !== 100}\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"Total(Â£)\">Total(Â£)</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"Total(Â£)\"\n            label=\"Total(Â£)\"\n            disabled\n            value={(amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"balance\">Current Total</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"balance\"\n            label=\"Current Total\"\n            disabled\n            value={currentTotal}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n      </Box>\n      {targetSplits.map((split, i) => {\n        const splitInAmt = Number((amount * split) / 100);\n        const splitCost = splitPrices[i];\n        const targetAmountFromTotalCurrent = (currentTotal * split) / 100;\n        const newInvestmentSplit = (newInvestment * targetSplits[i]) / 100;\n        const currentSplit = currentSplits[i] ? Number(currentSplits[i]) : 0;\n        const rebalanceAmt =\n          targetAmountFromTotalCurrent - currentSplit + newInvestmentSplit;\n        const rebalanceQty = Number(rebalanceAmt / splitCost);\n        const side = rebalanceQty > 0 ? \"Buy\" : \"Sell\";\n        const residueAmt =\n          (rebalanceQty - Number(Math.floor(rebalanceQty))) * splitCost;\n        return (\n          <Box\n            key={i}\n            className=\"split-section\"\n            sx={{\n              \"& > :not(style)\": {\n                m: 1\n              }\n            }}\n          >\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"amount\">{`Stock-${i + 1}`}</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"amount\"\n                value={split.toFixed(0)}\n                onChange={onSplitPercentChanges(i)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n                label={`Stock-${i + 1}`}\n                error={totalPercent !== 100}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"cost\">{`Price-${i + 1}`}</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"cost\"\n                value={splitCost}\n                onChange={onSplitCostChanges(i)}\n                startAdornment={\n                  <InputAdornment position=\"start\">Â£</InputAdornment>\n                }\n                label={`Price-${i + 1}`}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`amount${i}`}>Â£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`amount${i}`}\n                label=\"Â£\"\n                value={splitInAmt}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onTargetSplitValueChanges(i)}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`qty${i}`}>Qty#</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`qty${i}`}\n                label=\"Qty\"\n                value={Number(splitInAmt / splitCost).toFixed(0)}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currntAmount${i}`}>CurrentÂ£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`currntAmount${i}`}\n                label=\"CurrentÂ£\"\n                value={Number(currentSplits[i])}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onCurrentSplitValueChanges(i)}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currentPercent${i}`}>Current%</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`currentPercent${i}`}\n                label=\"Current%\"\n                value={Number(\n                  currentSplits[i]\n                    ? Number((currentSplits[i] * 100) / currentTotal)\n                    : 0\n                ).toFixed(0)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`rebalanceAmount${i}`}>Rebalance</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`rebalanceAmount${i}`}\n                label=\"Rebalance\"\n                value={Number(rebalanceAmt).toFixed(0)}\n                startAdornment={\n                  <InputAdornment position=\"start\">Â£</InputAdornment>\n                }\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`rebalanceQty${i}`}>Rebal#</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`rebalanceQty${i}`}\n                label=\"Rebal#\"\n                value={`${side} ${Math.abs(\n                  Math.floor(rebalanceQty)\n                )} (Â£${residueAmt.toFixed(2)})`}\n              />\n            </FormControl>\n            <IconButton\n              color=\"secondary\"\n              onClick={() => handleRemovetargetSplits(i)}\n            >\n              <Icon fontSize=\"small\" sx={{ color: red[500] }}>\n                remove_circle\n              </Icon>\n            </IconButton>\n          </Box>\n        );\n      })}\n\n      <IconButton\n        color=\"primary\"\n        aria-label=\"add to shopping cart\"\n        onClick={handleAddtargetSplits}\n      >\n        <Icon sx={{ color: green[500] }}>add_circle</Icon>\n      </IconButton>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}